#BlueJ class context
comment0.target=GameBoard
comment0.text=\r\n\ The\ physical\ game\ board\ for\ Connor\ Floyd's\ "The\ Royal\ Echoes\ of\ Ur"\ game\r\n\ \r\n\ @author\ cwfloyd@email.uscb.edu\r\n\ @version\ 2.0\r\n
comment1.params=
comment1.target=GameBoard()
comment1.text=\r\n\ Initialize\ the\ GameBoard\ object\ and\ its\ variable\ fields\r\n
comment10.params=playerIndex\ selectedPlayerPiece
comment10.target=void\ moveSelectedPieceIntoGoalZoneForPlayerIndex(int,\ PlayerPiece)
comment10.text=\r\n\ "Helper"\ method\ (here\ called\ by\ handleSelectedPieceForPlayerIndex)\ to\ move\ \r\n\ the\ selected\ playerPiece's\ SPRITE\ into\ the\ goal\ zone.\r\n\ Note\ that\ this\ only\ moves\ the\ player\ piece's\ SPRITE;\ the\ player\ piece's\ \r\n\ board\ location\ index\ is\ updated\ elsewhere\ (can\ you\ figure\ out\ where?)\r\n\ \r\n\ Actual\ X\ and\ Y\ coordinates\ of\ each\ player's\ piece\ in\ the\ goal\ zone\ are\ each\ \ \r\n\ computed\ as\ a\ linear\ function\ of\ how\ many\ of\ that\ player's\ pieces\ are\ already\ \r\n\ in\ the\ goal\ zone\ (i.e.,\ goalCountForPlayer[playerIndex])\r\n\ \r\n\ @param\ playerIndex\ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ player\ moving\ a\ piece\ into\ the\ goal\ zone\r\n\ @param\ selectedPlayerPiece\ \ \ a\ reference\ to\ the\ player's\ selected\ piece\r\n
comment11.params=playerIndex
comment11.target=void\ makeAllPiecesMoveableAgainForPlayerIndex(int)
comment11.text=\r\n\ "Turns\ on"\ (makes\ moveable)\ all\ of\ pieces\ for\ the\ given\ player\ (specified\ by\ `playerIndex`)\ \r\n\ at\ the\ conclusion\ of\ that\ player's\ turn\r\n\ \r\n\ @param\ playerIndex\ \ \ the\ index\ of\ the\ player\ that\ is\ completing\ their\ turn\r\n
comment12.params=playerIndex
comment12.target=void\ updateGameStateAfterTurnForPlayerIndex(int)
comment12.text=\r\n\ Updates\ the\ game\ state\ (and\ checks\ for\ a\ possible\ win\ condition)\ after\ the\ player\r\n\ (specified\ by\ `playerIndex`)\ has\ just\ completed\ their\ turn\r\n\ \r\n\ @param\ playerIndex\ \ \ the\ index\ of\ the\ player\ that\ has\ just\ completed\ their\ turn\r\n
comment13.params=playerIndex
comment13.target=void\ updateGoalCountForPlayerIndex(int)
comment13.text=\r\n\ For\ the\ given\ playerIndex,\ checks\ to\ see\ how\ many\ of\ that\ player's\ pieces\ have\ been\ \r\n\ moved\ into\ that\ goal\ zone\ at\ the\ end\ of\ that\ player's\ movement\ path\r\n\ \r\n\ @param\ playerIndex\ \ \ the\ index\ of\ the\ player\ whose\ pieces\ are\ being\ checked\ to\ see\ if\ they're\ in\ the\ goal\ zone\r\n
comment14.params=playerIndex\ selectedPlayerPiece
comment14.target=void\ resolveEchoRoll(int,\ PlayerPiece)
comment14.text=\r\n\ Helper\ method\ for\ resolving\ echo\ roll.\ Adds\ event\ objects\ when\ echo\ rolls\ happen.\r\n\ \r\n\ @param\ playerIndex\ \ \ index\ of\ current\ player\r\n\ @param\ piece\ \ \ \ \ \ \ \ \ player\ piece\r\n
comment2.params=
comment2.target=void\ prepare()
comment2.text=\r\n\ Prepare\ the\ world\ for\ the\ start\ of\ the\ program.\r\n\ Create\ the\ initial\ objects\ and\ add\ them\ to\ the\ world.\r\n
comment3.params=
comment3.target=void\ act()
comment3.text=\r\n\ Depending\ on\ the\ game's\ state,\ determines\ what\ the\ GameBoard\ does\ during\r\n\ each\ frame\ or\ cycle\ of\ the\ `act`\ method\r\n
comment4.params=playerIndex
comment4.target=void\ determineDieRollValueForPlayerIndex(int)
comment4.text=\r\n\ Determines\ the\ die\ roll\ for\ the\ current\ player.\ If\ the\ player\ is\ human,\r\n\ then\ the\ human\ player\ clicks\ on\ the\ die\ object\ to\ roll\ the\ die;\ otherwise,\r\n\ the\ die\ is\ automatically\ rolled\ by\ the\ CPU.\r\n\ \r\n\ @param\ playerIndex\ \ the\ index\ of\ the\ player\ rolling\ the\ die\r\n
comment5.params=playerIndex
comment5.target=void\ determineWhichPiecesAreMoveableForPlayerIndex(int)
comment5.text=\r\n\ Routine\ for\ determining\ which\ player\ one\ pieces\ are\ moveable\r\n\ \r\n\ @param\ playerIndex\ \ \ index\ of\ the\ player\ whose\ turn\ is\ currently\ active\r\n
comment6.params=playerIndex
comment6.target=void\ determineMoveForPlayerIndex(int)
comment6.text=\r\n\ Determines\ which\ of\ the\ player's\ moveable\ pieces\ will\ actually\ be\ moved\r\n\ \r\n\ @param\ playerIndex\ \ \ the\ index\ of\ the\ player\ currently\ moving\ \r\n
comment7.params=playerIndex\ selectedPlayerPiece
comment7.target=void\ handleSelectedPieceForPlayerIndex(int,\ PlayerPiece)
comment7.text=\r\n\ updates\ the\ given\ player\ piece's\ location\ index\ along\ the\ movement\ path\ for\ the\ given\ playerIndex\r\n\ \r\n\ @param\ playerIndex\ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ player\ moving\ the\ selected\ piece\r\n\ @param\ selectedPlayerPiece\ \ \ a\ reference\ to\ the\ player's\ selected\ piece\r\n
comment8.params=playerIndex\ selectedPlayerPiece
comment8.target=void\ moveSelectedPieceOntoTargetSpaceForPlayerIndex(int,\ PlayerPiece)
comment8.text=\r\n\ helper\ method\ (called\ by\ handleSelectedPieceForPlayerIndex)\ for\ moving\ a\r\n\ piece\ into\ a\ target\ space\ that\ is\ not\ the\ goal\r\n\ \r\n\ @param\ playerIndex\ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ player\ moving\ a\ piece\ into\ the\ piece's\ target\ space\ \r\n\ @param\ selectedPlayerPiece\ \ \ a\ reference\ to\ the\ player's\ selected\ piece\r\n
comment9.params=playerIndex\ selectedPlayerPiece
comment9.target=void\ resetCapturedPieceOnBoardAndReplaceWithSelectedPieceForPlayerIndex(int,\ PlayerPiece)
comment9.text=\r\n\ "Helper"\ method\ (here\ called\ by\ `moveSelectedPieceOntoTargetSpaceForPlayerIndex`)\ \r\n\ for\ handling\ the\ capture\ of\ an\ opposing\ player's\ piece\ \r\n\ \r\n\ @param\ playerIndex\ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ player\ moving\ a\ piece\ into\ that\ piece's\ target\ space\ \r\n\ @param\ selectedPlayerPiece\ \ \ a\ reference\ to\ the\ player's\ selected\ piece\r\n
numComments=15
